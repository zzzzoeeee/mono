// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MenuCategory {
  APPETIZER
  MAIN
  DESSERT
  BEVERAGE
}

enum VisitStatus {
  USING
  FINISHED
}

enum OrderStatus {
  PENDING
  PREPARING
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  USER
}

enum RestaurantUserRole {
  MANAGER
  STAFF
}

model Restaurant {
  id        String   @id @default(uuid())
  name      String
  address   String
  phone     String?
  website   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  menus           Menu[]
  tables          Table[]
  pricePlans      PricePlan[]
  restaurantUsers RestaurantUser[]
  visits          Visit[]
  orders          Order[]
}

model Menu {
  id           String       @id @default(uuid())
  restaurantId String
  name         String
  description  String?
  price        Float
  category     MenuCategory
  isAvailable  Boolean      @default(true)
  image        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems OrderItem[]

  @@unique([restaurantId, name])
}

model Table {
  id           String   @id @default(uuid())
  restaurantId String
  name         String
  capacity     Int
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  visits     Visit[]

  @@unique([restaurantId, name])
}

model PricePlan {
  id           String   @id @default(uuid())
  restaurantId String
  name         String
  description  String?
  price        Float
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  visits     Visit[]
}

model Visit {
  id            String      @id @default(uuid())
  restaurantId  String
  tableId       String
  pricePlanId   String
  customerCount Int
  status        VisitStatus @default(USING)
  visitedAt     DateTime
  departedAt    DateTime?
  duration      Int?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  table      Table      @relation(fields: [tableId], references: [id])
  pricePlan  PricePlan  @relation(fields: [pricePlanId], references: [id])
  orders     Order[]
}

model Order {
  id           String      @id @default(uuid())
  restaurantId String
  visitId      String
  status       OrderStatus @default(PENDING)
  note         String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id])
  visit      Visit       @relation(fields: [visitId], references: [id])
  items      OrderItem[]
}

model OrderItem {
  id       String  @id @default(uuid())
  orderId  String
  menuId   String
  quantity Int     @default(1)
  price    Float
  note     String?

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menu  Menu  @relation(fields: [menuId], references: [id])

  @@index([orderId])
  @@index([menuId])
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  restaurantUsers RestaurantUser[]
}

model RestaurantUser {
  id           String             @id @default(uuid())
  restaurantId String
  userId       String
  role         RestaurantUserRole @default(STAFF)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Relations
  restaurant Restaurant @relation(fields: [restaurantId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@unique([restaurantId, userId])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
